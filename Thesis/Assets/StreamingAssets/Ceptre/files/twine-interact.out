Celf ver 2.9. Copyright (C) 2011
[reading twine-interact.clf]
gotkey: type.
nokey: type.
gotlamp: type.
nolamp: type.
start: type.
den: type.
cellar: type.
dark: type.
lose: type.
win: type.
getlamp: type.
getkey: type.
opendoor: type.
action: type.
'start: action.
'opendoor: action.
'getlamp: action.
'getkey: action.
'starttoden: action.
'starttocellar: action.
'dentocellar: action.
'cellartodoor: action.
'cellartoden: action.
nat: type.
z: nat.
s: nat -> nat.
nth_act: nat -> action -> type.
act0: nth_act z 'starttoden.
act1: nth_act (s !z) 'getlamp.
act2: nth_act (s !(s !z)) 'getkey.
act3: nth_act (s !(s !(s !z))) 'dentocellar.
act4: nth_act (s !(s !(s !(s !z)))) 'cellartodoor.
cur: nat -> type.
cur_act: action -> type.
tick: type.
next_act: Pi A: action. Pi N: nat. (tick * (cur N * nth_act N A)) -o {cur_act A * cur (s !N)}.
start_to_den: (cur_act 'starttoden * start) -o {den * tick}.
start_to_cellar: (cur_act 'starttocellar * start) -o {cellar * tick}.
den_to_cellar: (cur_act 'dentocellar * den) -o {cellar * tick}.
den_to_lamp: (cur_act 'getlamp * (den * nolamp)) -o {getlamp}.
den_to_key: (cur_act 'getkey * (den * nokey)) -o {getkey}.
get_lamp: getlamp -o {gotlamp * (den * tick)}.
get_key: getkey -o {gotkey * (den * tick)}.
cellar_to_den: (cur_act 'cellartoden * cellar) -o {den * tick}.
cellar_to_door: (cur_act 'cellartodoor * cellar) -o {opendoor}.
open_door_without_key: (opendoor * nokey) -o {cellar * (nokey * tick)}.
open_door_with_key: (opendoor * gotkey) -o {dark}.
dark_with_lamp: (dark * gotlamp) -o {win}.
dark_without_lamp: (dark * nolamp) -o {lose}.
ending: type.
w: ending.
l: ending.
report: ending -> nat -> type.
report_win: Pi N: nat. (win * cur N) -o {report w N}.
report_loss: Pi N: nat. (lose * cur N) -o {report l N}.
init: Type = {nokey * (nolamp * (start * (cur z * tick)))}.
Trace * init
-- init lin
-- nokey lin, nolamp lin, start lin, cur z lin, tick lin
-- nokey lin, nolamp lin, start lin, cur_act 'starttoden lin, cur (s !z) lin
-- nokey lin, nolamp lin, cur (s !z) lin, den lin, tick lin
-- nokey lin, nolamp lin, den lin, cur_act 'getlamp lin, cur (s !(s !z)) lin
-- nokey lin, cur (s !(s !z)) lin, getlamp lin
-- nokey lin, cur (s !(s !z)) lin, gotlamp lin, den lin, tick lin
-- nokey lin, gotlamp lin, den lin, cur_act 'getkey lin, 
   cur (s !(s !(s !z))) lin
-- gotlamp lin, cur (s !(s !(s !z))) lin, getkey lin
-- gotlamp lin, cur (s !(s !(s !z))) lin, gotkey lin, den lin, tick lin
-- gotlamp lin, gotkey lin, den lin, cur_act 'dentocellar lin, 
   cur (s !(s !(s !(s !z)))) lin
-- gotlamp lin, gotkey lin, cur (s !(s !(s !(s !z)))) lin, cellar lin, tick lin
-- gotlamp lin, gotkey lin, cellar lin, cur_act 'cellartodoor lin, 
   cur (s !(s !(s !(s !(s !z))))) lin
-- gotlamp lin, gotkey lin, cur (s !(s !(s !(s !(s !z))))) lin, opendoor lin
-- gotlamp lin, cur (s !(s !(s !(s !(s !z))))) lin, dark lin
-- cur (s !(s !(s !(s !(s !z))))) lin, win lin
-- report w (s !(s !(s !(s !(s !z))))) lin
Success: 16 steps
Query (*, *, *, 1) init -o {report #END #NSTEPS}.
Solution: \X1. {
    let {[X2, [X3, [X4, [X5, X6]]]]} = X1 in 
    let {[X7, X8]} = next_act [X6, [X5, act0]] in 
    let {[X9, X10]} = start_to_den [X7, X4] in 
    let {[X11, X12]} = next_act [X10, [X8, act1]] in 
    let {X13} = den_to_lamp [X11, [X9, X3]] in 
    let {[X14, [X15, X16]]} = get_lamp X13 in 
    let {[X17, X18]} = next_act [X16, [X12, act2]] in 
    let {X19} = den_to_key [X17, [X15, X2]] in 
    let {[X20, [X21, X22]]} = get_key X19 in 
    let {[X23, X24]} = next_act [X22, [X18, act3]] in 
    let {[X25, X26]} = den_to_cellar [X23, X21] in 
    let {[X27, X28]} = next_act [X26, [X24, act4]] in 
    let {X29} = cellar_to_door [X27, X25] in 
    let {X30} = open_door_with_key [X29, X20] in 
    let {X31} = dark_with_lamp [X30, X14] in 
    let {X32} = report_win [X31, X28] in X32}
 #END = w
 #NSTEPS = s !(s !(s !(s !(s !z))))
[closing twine-interact.clf]
