%  Liveness analysis for a simple command language.
%
% Saturates in time O(v*n), where n is the number of instructions
% in the program and v is the number of variables.  See Lecture
% Notes 21 for the analysis.

% we use numbers 1, 2, ... for labels rather than unary z, s(z), ...
% this means we have to define a successor predicate that goes as
% high as we need it to.
succ 1 2.  !succ 2 3.  !succ 3 4.  !succ 4 5.  !succ 5 6.  !succ 6 7.

% Y and Z are both live in X = Op(Y, Z)

!inst L (assign X Op Y Z)
    -o !live Y L.

!inst L (assign X Op Y Z)
    -o !live Z L.

% if W is live at L+1, then it is live at L, provided it is not assigned to

!inst L (assign X Op Y Z),
!succ L L1,
!live W L1,
W <> X
    -o !live W L.

% liveness propagates back through jumps, including
% both branches of the conditional jump.

!inst L (goto K),
!live W K
    -o !live W L.

!inst L (if X K),
!live W K
    -o !live W L.

!inst L (if X K),
!succ L L1,
!live W L1
    -o !live W L.

% finally, the variable in a conditional is live

!inst L (if X K)
    -o !live X L.

#exec _ (!inst 1 (assign x plus y z),
         !inst 2 (if x 4),
         !inst 3 (goto 1),
         !inst 4 (assign w plus x x),
         !inst 5 (halt)).
