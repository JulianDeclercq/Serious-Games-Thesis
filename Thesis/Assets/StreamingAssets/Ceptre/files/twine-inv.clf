% A simple twine game with a few bits of state.
% This version has an inventory. It also plays with the representation of
% choices by writing rules as room -o {room1} & {room2}.


% Objects
obj : type.
key : obj.
lamp : obj.


% Inventories as bitmaps
bool : type.
tt : bool.
ff : bool.

has : obj -> bool -> type.

% linear, instantiated as part of init.
inventory : objlist -> type.

% Passages
start : type.
den : type.
cellar : type.
dark : type.
lose : type.
win : type.

% Actions (functionally the same as passages)
opendoor : type.
getlamp : type.
getkey : type.

init : type = {start * has key ff * has lamp ff}.

% Connectors
start_to_den : start -o {den} & {cellar}.

den_to_lamp : den * inventory I * notin lamp I -o {getlamp * inventory I}.
den_to_key : den * inventory I * notin key I -o {getkey * inventory I}.
den_to_cellar : den -o {cellar}.
get_lamp : getlamp * inventory I -o {inventory (ocons lamp I) * den}.
get_key : getkey * inventory I -o {inventory (ocons key I) * den}.

cellar_to_door : cellar -o {opendoor}.
cellar_to_den : cellar -o {den}.

open_door_without_key : opendoor * inventory I * notin key I 
                            -o {cellar * inventory I}.
open_door_with_key : opendoor * inventory I * isin key I -o {dark}.

dark_with_lamp : dark * inventory I * isin lamp I -o {win}.
dark_without_lamp : dark * inventory I * notin lamp I -o {lose}.

% Reporting
ending : type.
w : ending. l : ending.
report : ending -> type.
report_win : win -o {report w}.
report_loss : lose -o {report l}.

#query * * * 1 isin key (ocons !key !(ocons !lamp !onil)).

#trace * init.

#query * * * 10 init -o {report X}.
