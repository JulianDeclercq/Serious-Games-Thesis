% Building on prior Twine-based example to construct a full command
% language available to the player. Extend the game to include several
% actions that can happen (and fail) when combinatory commands are issued.


% Nouns
object : type.
room : type.

% State
got : object -> type.
#mode got +.
~got : object -> type. % complement of got.
#mode ~got +.

% Passages/locations/state machine positions
at_start : type.
#mode at_start.
at_den : type.
#mode at_den.
at_cellar : type.
#mode at_cellar.
at_dark : type.
#mode at_dark.
at_lose : type.
#mode at_lose.
at_win : type.
#mode at_win.
at_lamp : type.
#mode at_lamp.
at_key : type.
#mode at_key.
at_door : type.
#mode at_door.

% Noun instantiations
door : object.
key : object.
lamp : object.
den : room.
cellar : room.

%  These are all the player controls, including motion.
action : type.
'startat : room -> action.
'open : object -> action.
'get : object -> action.
'moveto : room -> action.

actlist : type.
nil : actlist.
cons : action -> actlist -> actlist.

% state
acts : actlist -> type.
% #mode acts +.
% fails

nat : type.
z : nat.
s : nat -> nat.

% current action
cur : nat -> type.
#mode cur -.
cur_act : action -> type.
#mode cur_act +.

% Transition rules. Every rule from the previous version has an additional
% cur_act premise, and outputs a "tick" whenever we want to return control
% to the player.

tick : type.
#mode tick.
%% Randomized player
% player : tick * cur N -o {cur (s N) * (Pi a:action.cur_act a)}.
%% List player
player : tick * acts (cons A As) * cur N 
             -o {cur_act A * acts As * cur (s N)}.

start_to_den    : cur_act ('startat den) * at_start  -o {at_den * tick}.
start_to_cellar : cur_act ('startat cellar) * at_start -o {at_cellar * tick}.

den_to_cellar : at_den * cur_act ('moveto cellar) -o {at_cellar * tick}.
den_to_lamp   : at_den * cur_act ('get key) * ~got key -o {at_key}.
den_to_key    : at_den * cur_act ('get lamp) * ~got lamp -o {at_lamp}.
get_key       : at_key -o {got key * at_den * tick}.
get_lamp      : at_lamp -o {got lamp * at_den * tick}.

cellar_to_den  : at_cellar * cur_act ('moveto den) -o {at_den * tick}.
cellar_to_door : at_cellar * cur_act ('open door) -o {at_door}.

open_door_without_key : at_door * ~got key -o {at_cellar * ~got key * tick}.
open_door_with_key    : at_door * got key -o {at_dark}.

dark_with_lamp    : at_dark * got lamp -o {at_win}.
dark_without_lamp : at_dark * ~got lamp -o {at_lose}.

% Reporting
ending : type.
w : ending. l : ending.
report : ending -> nat -> type. % the nat is the # of steps.
#mode report - -.
report_win : at_win * acts nil * cur N -o {report w N}.
report_loss : at_lose * acts nil * cur N -o {report l N}.

% Initial state
init : type = {~got key * ~got lamp * at_start * cur z * tick}.

% #trace * init.
% #query * * * 50 init -o {report END NSTEPS}.

#query * * * 5 acts AAAAA -o init -o {report ENDING NSTEPS}.
