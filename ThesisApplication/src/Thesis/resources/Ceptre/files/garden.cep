% bigger garden sim
% in this version, we'll try to introduce plants that can
%  - overtake other plants (overgrowth)
%  - require less water (overwatering kills them)
%
% to do this, each plant needs to record:
% - how many days it's gone w/o water
% - how many days in a row it's been watered

nat : type.
z : nat.
s nat : nat.
never : nat.

day nat : pred.

plant_type : type.
flower : plant_type.
herb : plant_type.
vine : plant_type.
succulent : plant_type.

plant_phase : type.
seed : plant_phase.
seedling : plant_phase.
mature : plant_phase.

next plant_phase plant_phase : bwd.
next seed seedling.
next seedling mature.

health : type.
healthy : health.
overgrowing : health.
wilting : health.
overwatered : health.
dead : health.

minus nat nat nat : bwd.
minus/z  : minus N z N.
minus/z' : minus z N z.
minus/s : minus (s N) (s M) P
          <- minus N M P.
minus/never : minus N never never.

% how many days can a plant go without water before it wilts?
water_limit nat : bwd.
wl : water_limit (s (s z)).

geq nat nat : bwd.
geq/z : geq N z.
geq/s : geq (s N) (s M)
        <- geq N M.
geq/never : geq never N.

harvested plant_type : pred.
have_seed plant_type : pred.

step : pred.
turns nat : pred.

soil_space : type.
space1 : soil_space.
space2 : soil_space.
space3 : soil_space.
space4 : soil_space.

% predicates on soil space
empty soil_space : pred.
has_plant soil_space plant_type plant_phase health : pred.
last_updated soil_space nat : pred.
last_watered soil_space nat : pred.
consecutive_waterings soil_space nat : pred.

% actions: water, plant, harvest
stage play {
  get_seeds : 
    turns (s N) * harvested Type 
      -o have_seed Type * have_seed Type * turns N.

  plant : 
    turns (s N) * have_seed Type * empty S * $day D 
      -o has_plant S Type seed healthy 
        * last_updated S D
        * consecutive_waterings S z
        * last_watered S never
        * turns N.
  
  harvest : 
    turns (s N) * has_plant Spot Type mature healthy
      * last_updated S _ * consecutive_waterings S _ * last_watered S _
      -o harvested Type * empty Spot * turns N.
  
  clear : turns (s N) * has_plant S Type _ dead
      * last_updated S _ * consecutive_waterings S _ * last_watered S _
      -o empty S * turns N.
  
  % XXX this isn't quite right wrt consecutive waterings
  water : turns (s N) * $has_plant S Type Phase Health
      * $day D * last_watered S _ * consecutive_waterings S W
      -o last_watered S D * consecutive_waterings S (s W) * turns N.
  
  done : turns _ -o ().
}
#interactive play.

qui * stage play -o stage advance_day * step.

stage advance_day = {
  advance : day N * step -o day (s N).
}

qui * stage advance_day -o stage grow.

stage grow = {
  grow : has_plant S Type Phase healthy * next Phase Phase' * $day (s D)
          * last_updated S D
            -o has_plant S Type Phase' healthy
                * last_updated S (s D).

  drink : has_plant S Type Phase wilting * last_updated S D * $day (s D)
          * $last_watered S D
          -o has_plant S Type Phase healthy * last_updated S (s D).
  
  wilt : has_plant S Type Phase healthy * last_updated S D * $day (s D)
          * $last_watered S WaterDay * minus (s D) WaterDay DaysAgo
            * water_limit WL * geq DaysAgo WL
            -o has_plant S Type Phase wilting
                * last_updated S (s D).

  die : has_plant S Type Phase wilting * last_updated S D * $day (s D)
            -o has_plant S Type Phase dead * last_updated S (s D).
}
qui * stage grow -o stage play * turns (s (s (s z))).

context init = {day z, 
  have_seed flower, have_seed herb, have_seed vine, have_seed succulent,
  empty space1, empty space2, empty space3, empty space4, turns (s (s (s z)))}.
#trace _ play init.


